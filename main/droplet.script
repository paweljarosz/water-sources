local function limit(self)
	local up_limit = 6
	local dn_limit = 0.5
	if self.des.y > up_limit then self.des.y = up_limit end
	if self.des.x > up_limit then self.des.x = up_limit end
	if self.des.x < dn_limit then self.des.x = dn_limit end
	if self.des.y < dn_limit then self.des.y = dn_limit end
end
function init(self)
	self.scale = go.get_scale()
	self.des = self.scale
	self.des.x = 2
	self.des.y = 4
	--[[timer.delay(0.4, true, function()
		self.des = go.get_position()
		self.des.y = self.des.y + 0.5
		self.des.x = self.des.x - 0.5
		limit(self)
	end)]]
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	self.scale = go.get_scale()
	self.scale.y = (self.scale.y > self.des.y) and (self.scale.y - 0.1) or (self.scale.y + 0.1)
	self.scale.x = (self.scale.x > self.des.x) and (self.scale.x - 0.1) or (self.scale.x + 0.1)
	go.set_scale(self.scale)
end

local m_trigger = hash("trigger_response")
local m_water = hash("water")
local m_ground = hash("ground")

function on_message(self, message_id, message, sender)
	if message_id == m_trigger then 
		if message.other_group == m_water then
			self.des = go.get_scale()
			self.des.y = self.des.y - 0.1
			self.des.x = self.des.x + 0.1
		end
		if message.other_group == m_ground then
			self.des_pos = go.get_scale()
			self.des.y = self.des.y - 3
			self.des.x = self.des.x + 3
		end
		limit(self)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
